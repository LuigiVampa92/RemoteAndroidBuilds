# This file contains all the properties you need to set your remote builds up and running

# Set two values below only if you start configuring your server straight from scratch by calling [remote_android_server_prepare.sh]
# Usually when you rent a server you are given its public IP address and root password.
# Set the public IP address of your new unprepared remote machine to [server.ssh.ip] parameter.
# SSH port number by default is 22, but if it is not standard for some reason the set it to [server.ssh.port] parameter.
# If you already have some existing server and want to use it and it is ready and set up in ~/.ssh/config file,
# then skip this section and move on to the next one.
#
# Note that in most cases ssh connection of root user is disabled by default.
# In this case you will have to use a server console first to enable it by fixing /etc/ssh/sshd_config file.
# Make sure that PermitRootLogin and PasswordAuthentication parameters are both set to "yes" and restart the ssh daemon (as root):
# systemctl restart sshd
# After that run [remote_android_server_prepare.sh] and enter the root password twice (first - copies the script, second - executes it)
# And it will setup ssh on your server fast and secure.
server.ssh.ip=127.0.0.1
server.ssh.port=22


# This block of parameters is ssh connection config. It will be used to connect your local machine to remote server.
# You can leave all these parameters without changes if you are preparing local and remote environment with
# [remote_android_local_prepare.sh] and [remote_android_server_prepare.sh] scripts from this repository.
#
# But if you want to use your existing server then you have to set all the parameters yourself.
# You can take them all from ~/.ssh/config file, in the section related to your server.
# If you haven't filled connection configs to your existing section earlier then you have to do it now,
# because gradle remote build plugin relies on those configs and will not work without them.
#
# [server.ssh.alias] is the "Host" parameter from ~/.ssh/config - an alias of your ssh connection.
# [server.ssh.set.user.name] is the "User" parameter from ~/.ssh/config - user on the remote server you are connecting to.
# [server.ssh.set.user.password] is the password of remote user. It is needed to run commands as root (to install software required to make builds).
# [server.ssh.set.port] is the "Port" parameter from ~/.ssh/config - a port on which ssh server runs.
# [server.ssh.set.key] is the "IdentityFile" parameter from ~/.ssh/config - a file with key used in key exchange when connecting to the server.
server.ssh.alias=android_builds_server
server.ssh.set.user.name=builder
server.ssh.set.user.password=builder
server.ssh.set.port=34567
server.ssh.set.key="~/.ssh/id_ed25519_android_builds_server"


# Set android sdk dependencies required to build your project.
# These includes platform-tools, your target SDK and your build tools. "platform-tools" must always be included.
# You can find target SDK and build tools version in your project's build.gradle files.
# Sometimes you need multiple target SDKs, but usually there is just one target SDK and one build-tools version per project.
# The values must be passed in quotas, separated by pipe character, like in example below.
# The example below is for building and app for target SDK Android R/Android 11/Android SDK 30 with build-tools version 30.0.3
# You must replace the example values with values required for your project.
server.sdk.dependencies="platform-tools|platforms;android-30|build-tools;30.0.3"


# Set [nexus.proxy.required] value to true only if your project uses a private maven or nexus repository.
# You will have to access it in order to download the dependencies artifacts and build the project.
# For that you have to manually setup the local proxy (like nginx) on your computer.
# Set it to listen to localhost on some port that you will later assign to [nexus.proxy.port] parameter
# (I picked 33333, but you can use any free port you want) and proxy incoming requests to real repository server.
# Then you will have to manually rewrite repo config block in your root project's build.gradle
# to make it use your new local proxy instead of real repository server.
# Private maven or nexus repositories are often hosted in private networks that can be accessed only via VPNs.
# It is not always possible to setup VPN on a build server, because sometimes VPNs might require USB tokens in order to connect.
# By using this approach it becomes possible to pass requests from build server to repository through your local machine.
# If your project does not have private repos then just leave [nexus.proxy.required] false and skip this section.
nexus.proxy.required=false
nexus.proxy.port=33333
